Index: cunit/temp.txt
===================================================================
--- cunit/temp.txt	(revision 0)
+++ cunit/temp.txt	(revision 0)
@@ -0,0 +1,2 @@
+Q
+i1 = 10
\ No newline at end of file
Index: cunit/CUnit-2.1-2-src.tar.bz2
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: cunit/CUnit-2.1-2-src.tar.bz2
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/octet-stream

Index: cunit/cunit-exam.c
===================================================================
--- cunit/cunit-exam.c	(revision 0)
+++ cunit/cunit-exam.c	(revision 0)
@@ -0,0 +1,130 @@
+/*
+ *  Simple example of a CUnit unit test.
+ *
+ *  This program (crudely) demonstrates a very simple "black box"
+ *  test of the standard library functions fprintf() and fread().
+ *  It uses suite initialization and cleanup functions to open
+ *  and close a common temporary file used by the test functions.
+ *  The test functions then write to and read from the temporary
+ *  file in the course of testing the library functions.
+ *
+ *  The 2 test functions are added to a single CUnit suite, and
+ *  then run using the CUnit Basic interface.  The output of the
+ *  program (on CUnit version 2.0-2) is:
+ *
+ *           CUnit : A Unit testing framework for C.
+ *           http://cunit.sourceforge.net/
+ *
+ *       Suite: Suite_1
+ *         Test: test of fprintf() ... passed
+ *         Test: test of fread() ... passed
+ *
+ *       --Run Summary: Type      Total     Ran  Passed  Failed
+ *                      suites        1       1     n/a       0
+ *                      tests         2       2       2       0
+ *                      asserts       5       5       5       0
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include "CUnit/Basic.h"
+
+/* Pointer to the file used by the tests. */
+static FILE* temp_file = NULL;
+
+/* The suite initialization function.
+ * Opens the temporary file used by the tests.
+ * Returns zero on success, non-zero otherwise.
+ */
+int init_suite1(void)
+{
+   if (NULL == (temp_file = fopen("temp.txt", "w+"))) {
+      return -1;
+   }
+   else {
+      return 0;
+   }
+}
+
+/* The suite cleanup function.
+ * Closes the temporary file used by the tests.
+ * Returns zero on success, non-zero otherwise.
+ */
+int clean_suite1(void)
+{
+   if (0 != fclose(temp_file)) {
+      return -1;
+   }
+   else {
+      temp_file = NULL;
+      return 0;
+   }
+}
+
+/* Simple test of fprintf().
+ * Writes test data to the temporary file and checks
+ * whether the expected number of bytes were written.
+ */
+void testFPRINTF(void)
+{
+   int i1 = 10;
+
+   if (NULL != temp_file) {
+      CU_ASSERT(0 == fprintf(temp_file, ""));
+      CU_ASSERT(2 == fprintf(temp_file, "Q\n"));
+      CU_ASSERT(7 == fprintf(temp_file, "i1 = %d", i1));
+   }
+}
+
+/* Simple test of fread().
+ * Reads the data previously written by testFPRINTF()
+ * and checks whether the expected characters are present.
+ * Must be run after testFPRINTF().
+ */
+void testFREAD(void)
+{
+   unsigned char buffer[20];
+
+   if (NULL != temp_file) {
+      rewind(temp_file);
+      CU_ASSERT(9 == fread(buffer, sizeof(unsigned char), 20, temp_file));
+      CU_ASSERT(0 == strncmp(buffer, "Q\ni1 = 10", 9));
+   }
+}
+
+/* The main() function for setting up and running the tests.
+ * Returns a CUE_SUCCESS on successful running, another
+ * CUnit error code on failure.
+ */
+int main()
+{
+   CU_pSuite pSuite = NULL;
+
+   /* initialize the CUnit test registry */
+   if (CUE_SUCCESS != CU_initialize_registry())
+      return CU_get_error();
+
+   /* add a suite to the registry */
+   pSuite = CU_add_suite("Suite_1", init_suite1, clean_suite1);
+   if (NULL == pSuite) {
+      CU_cleanup_registry();
+      return CU_get_error();
+   }
+
+   /* add the tests to the suite */
+   /* NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() */
+   if ((NULL == CU_add_test(pSuite, "test of fprintf()", testFPRINTF)) ||
+       (NULL == CU_add_test(pSuite, "test of fread()", testFREAD)))
+   {
+      CU_cleanup_registry();
+      return CU_get_error();
+   }
+
+   /* Run all tests using the CUnit Basic interface */
+   CU_basic_set_mode(CU_BRM_VERBOSE);
+   CU_basic_run_tests();
+   CU_cleanup_registry();
+   return CU_get_error();
+}
+
+
Index: cunit/Makefile
===================================================================
--- cunit/Makefile	(revision 0)
+++ cunit/Makefile	(revision 0)
@@ -0,0 +1,6 @@
+cunit-exam:  cunit-exam.c
+	gcc -o cunit-exam cunit-exam.c -lcunit -static -O2 -g
+
+clean:
+	rm cunit-exam
+
Index: lint/lint-exam.c
===================================================================
--- lint/lint-exam.c	(revision 0)
+++ lint/lint-exam.c	(revision 0)
@@ -0,0 +1,13 @@
+int main(int argc,char* argv[])
+{
+
+	int a=100; /*没有使用的变量*/
+	int b[8];
+	printf("Hello c\n");
+	b[9]=100; /*明显数组越界 */
+
+	/* 用到了两个为声明的变量c和d */
+	   c=100;
+	   d=10;
+	   return 0;
+}
Index: typeof/max.c
===================================================================
--- typeof/max.c	(revision 0)
+++ typeof/max.c	(revision 0)
@@ -0,0 +1,14 @@
+#define max(x,y) ({ \
+	    typeof(x) _x = (x);    \
+	    typeof(y) _y = (y);    \
+	    (void) (&_x == &_y);        \
+	    _x > _y ? _x : _y; })
+
+int main(void)
+{
+	int a=3;
+	float b=0.5;
+	max(a,b);
+
+	return 0;
+}
Index: typeof/Makefile
===================================================================
--- typeof/Makefile	(revision 0)
+++ typeof/Makefile	(revision 0)
@@ -0,0 +1,13 @@
+all: c99 c89 gnu
+
+c99:  max.c
+	gcc -o c99  max.c  -std=c99 ${CFLAGS}
+
+c89:  max.c
+	gcc -o c89  max.c  -std=c89 -pedantic -pedantic-errors ${CFLAGS}
+
+gnu:  max.c
+	gcc -o gnu  max.c -std=gnu89 ${CFLAGS}
+
+clean:
+	rm c99 c89 gnu
Index: zero-array/zero-array.c
===================================================================
--- zero-array/zero-array.c	(revision 0)
+++ zero-array/zero-array.c	(revision 0)
@@ -0,0 +1,17 @@
+#include <stdio.h>
+#include <string.h>
+struct A
+{
+	int   a, b;
+	char data[0];
+};
+
+int main(int argc, char *argv[])
+{
+	struct A *p;
+
+	int n = 100, i;
+	p = malloc(sizeof(struct A) + n);
+	for (i = 0; i < n; ++i)
+		p->data[i] = 1;
+}
Index: zero-array/Makefile
===================================================================
--- zero-array/Makefile	(revision 0)
+++ zero-array/Makefile	(revision 0)
@@ -0,0 +1,10 @@
+all: c89 gnu
+
+c89:  zero-array.c
+	gcc -o c89  zero-array.c  -std=c89 -pedantic -pedantic-errors ${CFLAGS}
+
+gnu:  zero-array.c
+	gcc -o gnu  zero-array.c -std=gnu89 ${CFLAGS}
+
+clean:
+	rm c89 gnu
Index: doxygen/doxygen-exam.cpp
===================================================================
--- doxygen/doxygen-exam.cpp	(revision 0)
+++ doxygen/doxygen-exam.cpp	(revision 0)
@@ -0,0 +1,47 @@
+/**
+ * @file
+ * @author  John Doe <jdoe@example.com>
+ * @version 1.0
+ *
+ * @section LICENSE
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details at
+ * http://www.gnu.org/copyleft/gpl.html
+ *
+ * @section DESCRIPTION
+ *
+ * The time class represents a moment of time.
+ */
+ 
+class Time {
+ 
+    public:
+ 
+       /**
+        * Constructor that sets the time to a given value.
+        * 
+        * @param timemillis Number of milliseconds 
+        *        passed since Jan 1, 1970.
+        */
+       Time (int timemillis) {
+           // the code
+       }
+ 
+       /**
+        * Get the current time.
+        *
+        * @return A time object set to the current time.
+        */
+       static Time now () {
+           // the code
+       }
+};
+
